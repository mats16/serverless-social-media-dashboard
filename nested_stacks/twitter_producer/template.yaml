AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: '[Social Media Dashboard] Twitter Producer Stack'

Parameters:

  ParentStackName:
    Type: String

  VpcId:
    Type: String
  
  PublicSubnetList:
    Type: CommaDelimitedList

  TweetStreamName:
    Type: String

  CloudWatchAgentImage:
    Type: String
    Default: amazon/cloudwatch-agent:latest

  PlatformVersion:
    Type: String
    Default: 1.4.0

  TwitterTopicsParameter:
    Type: String
  TwitterLanguagesParameter:
    Type: String
  TwitterFilterLevelParameter:
    Type: String
  TwitterCredentials:
    Type: String

Resources:

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS Twitter Producer
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: twitter-producer-sg
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"

  SecurityGroupIngress:
   Type: 'AWS::EC2::SecurityGroupIngress'
   Properties:
      Description: Fluent-Bit Prometheus Metrics
      GroupId: !GetAtt SecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 2020
      ToPort: 2020
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: GetSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - !Ref TwitterCredentials

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ParentStackName
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # Twitter Producer
  TwitterProducerLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/${ParentStackName}/ecs/twitter-producer'
      RetentionInDays: 30

  TwitterProducerTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess'
      Policies:
        - PolicyName: PutTweets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: KinesisAccess
                Effect: Allow
                Action:
                  - 'kinesis:PutRecord'
                  - 'kinesis:PutRecords'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${TweetStreamName}'

  TwitterProducerTaskDef: 
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: twitter-producer
      RequiresCompatibilities: 
        - "FARGATE"
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      TaskRoleArn: !Ref TwitterProducerTaskRole
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions: 
        - Name: twitter-producer
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ParentStackName}/twitter-producer:latest'
          Essential: "true"
          DependsOn:
            - ContainerName: fluent-bit
              Condition: START
          Secrets:
            - Name: TWITTER_TOPICS
              ValueFrom: !Ref TwitterTopicsParameter
            - Name: TWITTER_LANGUAGES
              ValueFrom: !Ref TwitterLanguagesParameter
            - Name: TWITTER_FILTER_LEVEL
              ValueFrom: !Ref TwitterFilterLevelParameter
            - Name: TWITTER_CREDENTIALS
              ValueFrom: !Ref TwitterCredentials
          ReadonlyRootFilesystem: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TwitterProducerLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: stdout
        - Name: fluent-bit
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ParentStackName}/fluent-bit:latest'
          Essential: "true"
          PortMappings:
            - ContainerPort: 2020
              Protocol: tcp
          Environment:
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: DELIVERY_STREAM_NAME
              Value: !Ref TweetStreamName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TwitterProducerLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: stdout

  TwitterProducerSvc:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: twitter-producer
      Cluster: !Ref Cluster
      DesiredCount: 2
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      #LaunchType: FARGATE
      PlatformVersion: !Ref PlatformVersion
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets: !Ref PublicSubnetList
      TaskDefinition: !Ref TwitterProducerTaskDef

  ForceUpdateServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: '[Social Media Dashboard] Force updating ECS service on Parameters/Secrets changes.'
      Runtime: python3.8
      Handler: index.lambda_handler
      CodeUri: functions/force_update_service/
      Environment:
        Variables:
          CLUSTER_NAME: !Ref Cluster
          SERVICE_NAME: !GetAtt TwitterProducerSvc.Name
      Events:
        ParametersChange:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source: 
                - 'aws.ssm'
              detail-type: 
                - 'Parameter Store Change'
              detail: 
                name:
                  - !Sub '/${ParentStackName}/Twitter/Topics'
                  - !Sub '/${ParentStackName}/Twitter/Languages'
                  - !Sub '/${ParentStackName}/Twitter/FilterLevel'
                operation:
                  - Update
        SecretsChange:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source: 
                - 'aws.secretsmanager'
              detail-type: 
                - 'AWS API Call via CloudTrail'
              detail:
                eventSource:
                  - secretsmanager.amazonaws.com
                eventName:
                  - PutSecretValue
                requestParameters:
                  secretId:
                    - !Sub '${ParentStackName}/TwitterCredentials'
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: ecs:UpdateService
              Resource: !Ref TwitterProducerSvc

  # CloudWatch Prometheus
  CloudWatchAgentLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/${ParentStackName}/ecs/cloudwatch-prometheus'
      RetentionInDays: 30
  PrometheusLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ecs/containerinsights/${Cluster}/prometheus'
      RetentionInDays: 1

  CloudWatchAgentTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Allows ECS tasks to call AWS services on your behalf.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: ECSServiceDiscoveryInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:DescribeContainerInstances
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ecs:DescribeTaskDefinition
                Resource: "*"

  CloudWatchAgentTaskDef:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: 'cloudwatch-agent-prometheus'
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      TaskRoleArn: !Ref CloudWatchAgentTaskRole
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: cloudwatch-agent
          Image: !Ref CloudWatchAgentImage
          Essential: true
          MountPoints: []
          PortMappings: []
          Environment: []
          Secrets:
            - Name: PROMETHEUS_CONFIG_CONTENT
              ValueFrom: !Ref PrometheusConfigParameter
            - Name: CW_CONFIG_CONTENT
              ValueFrom: !Ref CloudWatchAgentConfigParameter
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchAgentLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: stdout

  CloudWatchAgentSvc:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: cloudwatch-agent-prometheus
      Cluster: !Ref Cluster
      DesiredCount: 1
      LaunchType: FARGATE
      PlatformVersion: !Ref PlatformVersion
      TaskDefinition: !Ref CloudWatchAgentTaskDef
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets: !Ref PublicSubnetList

  PrometheusConfigParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ParentStackName}/CloudWatch/PrometheusConfig'
      Type: String
      Tier: Standard
      Description: !Sub 'Prometheus Scraping SSM Parameter for ECS Cluster'
      Value: |-
        global:
          scrape_interval: 1m
          scrape_timeout: 10s
        scrape_configs:
          - job_name: cwagent-ecs-file-sd-config
            sample_limit: 10000
            file_sd_configs:
              - files: [ "/tmp/cwagent_ecs_auto_sd.yaml" ]

  CloudWatchAgentConfigParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ParentStackName}/CloudWatch/CloudWatchAgentConfig'
      Type: String
      Tier: Intelligent-Tiering
      Description: !Sub 'CloudWatch-Agent SSM Parameters with EMF Definition for ECS Cluster'
      Value: !Sub |-
        {
          "logs": {
            "metrics_collected": {
              "prometheus": {
                "log_group_name": "${PrometheusLogGroup}",
                "prometheus_config_path": "env:PROMETHEUS_CONFIG_CONTENT",
                "ecs_service_discovery": {
                  "sd_frequency": "1m",
                  "sd_result_file": "/tmp/cwagent_ecs_auto_sd.yaml",
                  "docker_label": {
                  },
                  "task_definition_list": [
                    {
                      "sd_job_name": "ecs-fluent-bit",
                      "sd_metrics_ports": "2020",
                      "sd_task_definition_arn_pattern": ".*:task-definition/twitter-producer:[0-9]+",
                      "sd_metrics_path": "/api/v1/metrics/prometheus"
                    }
                  ]
                },
                "emf_processor": {
                  "metric_declaration": [
                    {
                      "source_labels": ["StartedBy"],
                      "label_matcher": "^ecs-svc/.*",
                      "dimensions": [
                        ["ClusterName", "TaskGroup", "name"],
                        ["ClusterName", "TaskDefinitionFamily", "name"],
                        ["ClusterName", "instance", "name"]
                      ],
                      "metric_selectors": [
                        "^fluentbit_input_(records|bytes)_total$",
                        "^fluentbit_output_proc_(records|bytes)_total$",
                        "^fluentbit_output_errors_total$",
                        "^fluentbit_output_retries_(total|failed_total)$"
                      ]
                    }
                  ]
                }
              }
            },
            "force_flush_interval": 5
          }
        }

Outputs:

  ClusterName:
    Value: !Ref Cluster

  ServiceName:
    Value: !GetAtt TwitterProducerSvc.Name
