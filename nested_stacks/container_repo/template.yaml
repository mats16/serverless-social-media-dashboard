AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: '[Social Media Dashboard] Container Repository Stack'

Parameters:

  ParentStackName:
    Type: String

  S3ObjectsFunctionArn:
    Type: String

  RetainedImageCount:
    Type: Number
    Default: 5

  DockerHubCredentials:
    Type: String

Resources:

  TwitterProducerRepo:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryName: !Sub '${ParentStackName}/twitter-producer'
      ImageScanningConfiguration: 
        scanOnPush: "true"
      LifecyclePolicy:
        LifecyclePolicyText: !Sub '{"rules": [{"rulePriority": 1, "description": "Retained Image count: ${RetainedImageCount}", "selection": {"tagStatus": "any", "countType": "imageCountMoreThan", "countNumber": ${RetainedImageCount}}, "action": {"type": "expire"}}]}'
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          Sid: AllowPull
          Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action:
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - ecr:BatchCheckLayerAvailability

  FluentBitRepo:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryName: !Sub '${ParentStackName}/fluent-bit'
      ImageScanningConfiguration: 
        scanOnPush: "true"
      LifecyclePolicy:
        LifecyclePolicyText: !Sub '{"rules": [{"rulePriority": 1, "description": "Retained Image count: ${RetainedImageCount}", "selection": {"tagStatus": "any", "countType": "imageCountMoreThan", "countNumber": ${RetainedImageCount}}, "action": {"type": "expire"}}]}'
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          Sid: AllowPull
          Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action:
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - ecr:BatchCheckLayerAvailability

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeBuild
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}'
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                Resource:
                  - !GetAtt TwitterProducerRepo.Arn
                  - !GetAtt FluentBitRepo.Arn
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource:
                  - '*'
        - PolicyName: GetSecretValue-DockerHubCredentials
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref DockerHubCredentials

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Source-S3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketVersioning
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub '${ArtifactBucket.Arn}'
                  - !Sub '${ArtifactBucket.Arn}/*'
        - PolicyName: Build-CodeBuild
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !GetAtt DockerBuildProject.Arn
        - PolicyName: Deploy-ECS
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                Resource: '*'
              - Effect: Allow
                Action: iam:PassRole
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ParentStackName}-*'

  DockerBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          env:
            secrets-manager:
              DOCKERHUB_USERNAME: ${DockerHubCredentials}:username
              DOCKERHUB_PASSWORD: ${DockerHubCredentials}:password
          phases:
            pre_build:
              commands:
                - echo Logging in to Docker Hub...
                - echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin || exit 0
                - echo Logging in to Amazon ECR...
                - $(aws ecr get-login --no-include-email)           
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build --tag $ECR_DOMAIN/$REPO_NAME:$ETAG $BUILD_DIR
                - docker tag $ECR_DOMAIN/$REPO_NAME:$ETAG $ECR_DOMAIN/$REPO_NAME:latest
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $ECR_DOMAIN/$REPO_NAME:$ETAG
                - docker push $ECR_DOMAIN/$REPO_NAME:latest
                - printf "[{\"name\":\"twitter-producer\",\"imageUri\":\"$ECR_DOMAIN/${TwitterProducerRepo}:$ETAG\"},{\"name\":\"fluent-bit\",\"imageUri\":\"$ECR_DOMAIN/${FluentBitRepo}:$ETAG\"}]" > imagedefinitions.json
          artifacts:
            files: imagedefinitions.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:18.09.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: ECR_DOMAIN
            Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com'
      Cache:
        Type: LOCAL
        Modes:
          - LOCAL_DOCKER_LAYER_CACHE

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Dockerfile
              Namespace: SourceVariables
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration:
                S3Bucket: !Ref ArtifactBucket
                S3ObjectKey: src/dockerfile.zip
              RunOrder: 1
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: twitter-producer
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref DockerBuildProject
                EnvironmentVariables: !Sub |
                  [
                    {"name": "ETAG", "value": "#{SourceVariables.ETag}","type": "PLAINTEXT"},
                    {"name": "REPO_NAME", "value": "${TwitterProducerRepo}","type": "PLAINTEXT"},
                    {"name": "BUILD_DIR", "value": "./twitter-producer", "type": "PLAINTEXT"}
                  ]
              RunOrder: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput1
            - Name: fluent-bit
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref DockerBuildProject
                EnvironmentVariables: !Sub |
                  [
                    {"name": "ETAG", "value": "#{SourceVariables.ETag}","type": "PLAINTEXT"},
                    {"name": "REPO_NAME", "value": "${FluentBitRepo}","type": "PLAINTEXT"},
                    {"name": "BUILD_DIR", "value": "./fluent-bit", "type": "PLAINTEXT"}
                  ]
              RunOrder: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput2
        - Name: Deploy
          Actions:
            - Name: ECS-Fargate
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName: !Ref ParentStackName
                ServiceName: twitter-producer
                FileName: imagedefinitions.json
              RunOrder: 1
              InputArtifacts:
                - Name: BuildOutput2

  DockerfileLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'dockerfile-${ParentStackName}'
      Description: Dockerfile
      ContentUri: containers/

  DockerfileZip:
    Type: Custom::S3Objects
    DependsOn: CodePipeline
    Properties:
      ServiceToken: !Ref S3ObjectsFunctionArn
      Bucket: !Ref ArtifactBucket
      Path: src/
      Key: dockerfile.zip
      SourceLayerArn: !Ref DockerfileLayer

  CodePipelineNotificationRule:
    Type: AWS::CodeStarNotifications::NotificationRule
    Properties: 
      DetailType: FULL
      EventTypeIds:
        - codepipeline-pipeline-action-execution-succeeded
        - codepipeline-pipeline-action-execution-failed
      Name: !Sub 'Notification Rule for CodePipeline'
      Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}'
      Targets: 
        - TargetType: SNS
          TargetAddress: !Ref Topic

  Topic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Topic for CodeStar Notifications

  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref Topic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codestar-notifications.amazonaws.com
            Action: SNS:Publish
            Resource: !Ref Topic

Outputs:
  
  Topic:
    Value: !Ref Topic
