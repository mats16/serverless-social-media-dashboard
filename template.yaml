AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"
Description: 'Social Media Dashboard Main Stack'
Metadata:
  AWS::ServerlessRepo::Application:
    Name: serverless-social-media-dashboard
    Description: "Serverless Social Media Dashboard"
    Author: Kazuki Matsuda
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['serverless', 'fargate', 'lambda', 'kinesis', 'elasticsearch', 'twitter']
    HomePageUrl: https://github.com/mats16/serverless-social-media-dashboard
    SemanticVersion: 0.0.4
    SourceCodeUrl: https://github.com/mats16/serverless-social-media-dashboard

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Twitter API Parameters
        Parameters:
          - TwitterTermList
          - TwitterLanguages
          - TwitterFilterLevel
      - Label:
          default: Twitter API Credentials
        Parameters:
          - AuthConsumerKey
          - AuthConsumerSecret
          - AuthAccessToken
          - AuthAccessTokenSecret
      - Label:
          default: Application Parameters
        Parameters:
          - ComprehendEntityScoreThreshold
          - SignupAllowedDomains
      - Label:
          default: Elasticsearch Configuration
        Parameters:
          - ElasticsearchVersion
          - ElasticsearchAvailabilityZoneCount
          - ElasticsearchDataNodeInstanceType
          - ElasticsearchDataNodeInstanceCount
          - ElasticsearchMasterNodeInstanceType
          - ElasticsearchMasterNodeInstanceCount
          - ElasticsearchAdvancedSecurityEnabled

Parameters:

  TwitterTermList:
    Description: List of terms for twitter to listen to
    Type: CommaDelimitedList
    Default: "AWS,EC2,RDS,S3"

  TwitterLanguages:
    Description: List of languages to use for the twitter streaming reader
    Type: CommaDelimitedList
    Default: "en,es,fr,de,it,pt,ar,hi,ja,ko,zh"

  TwitterFilterLevel:
    Description: https://developer.twitter.com/en/docs/tweets/filter-realtime/api-reference/post-statuses-filter
    Type: String
    Default: none
    AllowedValues:
      - none
      - low
      - medium

  AuthAccessToken:
    Description: Access Token for calling twitter
    Type: String
  AuthAccessTokenSecret:
    Description: Access Token Secret for calling twitter
    Type: String
    NoEcho: True
  AuthConsumerKey:
    Description: Consumer key for access twitter
    Type: String
  AuthConsumerSecret:
    Description: Consumer Secret for access twitter
    Type: String
    NoEcho: True

  ComprehendEntityScoreThreshold:
    Type: Number
    Default: 0.8
    MaxValue: 1
    MinValue: 0

  SignupAllowedDomains:
    Type: CommaDelimitedList
    Description: Specific domains allowed to register on Cognito User Pool
    Default: amazon.com,amazon.co.jp

  ElasticsearchVersion:
    Type: String
    Default: 7.8

  ElasticsearchAvailabilityZoneCount:
    Type: Number
    Default: 2
    AllowedValues:
      - 1
      - 2
      - 3

  ElasticsearchDataNodeInstanceType:
    Type: String
    Default: i3.large.elasticsearch
    AllowedPattern: ^[a-z1-9]+\.[a-z1-9]+\.elasticsearch$

  ElasticsearchDataNodeInstanceCount:
    Type: Number
    Default: 2

  ElasticsearchMasterNodeInstanceType:
    Type: String
    Default: t3.medium.elasticsearch
    AllowedPattern: ^[a-z1-9]+\.[a-z1-9]+\.elasticsearch$

  ElasticsearchMasterNodeInstanceCount:
    Type: Number
    Default: 3
    AllowedValues: [ 3, 5 ]

  ElasticsearchAdvancedSecurityEnabled:
    Description: Fine-Grained Access Control
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  LabelingJobEnabled:
    Description: Enable labeling job for machine-learning
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

Conditions:
  LabelingJobEnabled: !Equals [ !Ref LabelingJobEnabled, 'true' ]

Globals:
  Function:
    Runtime: python3.8
    Handler: index.lambda_handler
    Layers:
      - !Ref PowertoolsLayer

Resources:
  # ParameterStore & SecretsManager --------------------------------------
  TwitterTopicsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${AWS::StackName}/Twitter/Topics'
      Description: A comma-separated list of phrases which will be used to determine what Tweets will be delivered on the stream.
      Type: StringList
      Value: !Join [ ',', !Ref TwitterTermList ]

  TwitterLanguagesParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${AWS::StackName}/Twitter/Languages'
      Type: StringList
      Value: !Join [ ',', !Ref TwitterLanguages ]

  TwitterFilterLevelParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${AWS::StackName}/Twitter/FilterLevel'
      Type: String
      Value: !Ref TwitterFilterLevel

  TwitterConsumerKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}/Twitter/ConsumerKey'
      SecretString:
        !Ref AuthConsumerKey

  TwitterConsumerSecretKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}/Twitter/ConsumerSecretKey'
      SecretString:
        !Ref AuthConsumerSecret

  TwitterAccessToken:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}/Twitter/AccessToken'
      SecretString:
        !Ref AuthAccessToken

  TwitterAccessTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}/Twitter/AccessTokenSecret'
      SecretString:
        !Ref AuthAccessTokenSecret

  # Authentication --------------------------------------
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true

  PreSignUpTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'PreSignUp Lambda Trigger for Cognito User Pool'
      CodeUri: functions/pre_signup_trigger/
      Environment:
        Variables:
          ALLOWED_DOMAINS: !Join [',', !Ref SignupAllowedDomains]
      Events:
        Stream:
          Type: Cognito
          Properties:
            Trigger: PreSignUp
            UserPool: !Ref UserPool

  # Notification --------------------------------------
  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Topic for Chatbot
      Tags: 
        - Key: cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: cloudformation:stack-id
          Value: !Ref AWS::StackId

  ChatbotRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: chatbot.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess

  AlertBot:
    Type: AWS::Chatbot::SlackChannelConfiguration
    Condition: SlackEnabled
    Properties: 
      ConfigurationName: Alerting
      LoggingLevel: INFO
      SlackWorkspaceId: !Ref SlackWorkspaceId
      SlackChannelId: !Ref SlackChannelId
      IamRoleArn: !GetAtt ChatbotRole.Arn
      SnsTopicArns: 
        - !Ref AlarmTopic

  # Application Main --------------------------------------
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"

  TweetStream:
    Type: AWS::Kinesis::Stream
    Properties: 
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption: 
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  TweetStreamForBatch:
    Type: AWS::Kinesis::Stream
    Properties: 
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption: 
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  IndexingStream:
    Type: AWS::Kinesis::Stream
    Properties: 
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption: 
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  AnalyticsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: '[Social Media Dashboard] Analytics Function'
      CodeUri: functions/analytics/
      MemorySize: 192
      Timeout: 900
      Tracing: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:2"
      Environment:
        Variables:
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Analytics
          POWERTOOLS_METRICS_NAMESPACE: Lambda/Custom
          #LIVE_METRICS: enabled
          TWEET_DAY_THRESHOLD: 180
          TWEET_LANGS: !GetAtt TwitterLanguagesParameter.Value
          COMPREHEND_ENTITY_SCORE_THRESHOLD: !Ref ComprehendEntityScoreThreshold
          INDEXING_STREAM: !Ref IndexingStream
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt TweetStream.Arn
            StartingPosition: LATEST
            ParallelizationFactor: 1
            BatchSize: 200
            MaximumRecordAgeInSeconds: 300
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Version: "2012-10-17"
          Statement:
            - Sid: ComprehendAccess
              Effect: Allow
              Action: ['comprehend:DetectEntities', 'comprehend:DetectSentiment', 'comprehend:DetectKeyPhrases']
              Resource: '*'
            - Sid: TranslateAccess
              Effect: Allow
              Action: ['translate:TranslateText']
              Resource: '*'
            - Sid: KinesisAccess
              Effect: Allow
              Action:
                - 'kinesis:PutRecord'
                - 'kinesis:PutRecords'
              Resource: !GetAtt IndexingStream.Arn

  AnalyticsFunctionForBatch:
    Type: AWS::Serverless::Function
    Properties:
      Description: '[Social Media Dashboard] Analytics Function for Batch'
      CodeUri: functions/analytics/
      MemorySize: 192
      Timeout: 900
      Tracing: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:2"
      Environment:
        Variables:
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: AnalyticsForBatch
          POWERTOOLS_METRICS_NAMESPACE: Lambda/Custom
          #LIVE_METRICS: disabled
          TWEET_DAY_THRESHOLD: 730
          TWEET_LANGS: !GetAtt TwitterLanguagesParameter.Value
          COMPREHEND_ENTITY_SCORE_THRESHOLD: !Ref ComprehendEntityScoreThreshold
          INDEXING_STREAM: !Ref IndexingStream
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt TweetStreamForBatch.Arn
            StartingPosition: LATEST
            ParallelizationFactor: 10
            BatchSize: 200
            MaximumRecordAgeInSeconds: 604800
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Version: "2012-10-17"
          Statement:
            - Sid: ComprehendAccess
              Effect: Allow
              Action: ['comprehend:DetectEntities', 'comprehend:DetectSentiment', 'comprehend:DetectKeyPhrases']
              Resource: '*'
            - Sid: TranslateAccess
              Effect: Allow
              Action: ['translate:TranslateText']
              Resource: '*'
            - Sid: KinesisAccess
              Effect: Allow
              Action:
                - 'kinesis:PutRecord'
                - 'kinesis:PutRecords'
              Resource: !GetAtt IndexingStream.Arn

#  TweetEventBus:
#    Type: AWS::Events::EventBus
#    Properties: 
#      Name: !Ref AWS::StackName
#
#  PuEventFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Description: 'PutEvent function  - KinesisStream to EventBridge'
#      CodeUri: source/put_events_function/
#      Handler: index.lambda_handler
#      Runtime: python3.7
#      MemorySize: 128
#      Timeout: 10
#      Tracing: Active
#      Environment:
#        Variables:
#          EventBusName: !Ref TweetEventBus
#      Events:
#        Stream:
#          Type: Kinesis
#          Properties:
#            Stream: !GetAtt IndexingStream.Arn
#            BatchSize: 10
#            StartingPosition: LATEST
#      Policies:
#        - Version: "2012-10-17"
#          Statement:
#            - Sid: PutEvents
#              Effect: Allow
#              Action:
#                - events:PutEvents
#              Resource:
#                - !GetAtt TweetEventBus.Arn

  # Nested Stacks --------------------------------------
  VpcStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: nested_stacks/vpc/template.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName

  TwitterProducerStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: nested_stacks/twitter_producer/template.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        AlarmTopic: !Ref AlarmTopic
        VpcId: !GetAtt VpcStack.Outputs.VpcId
        PublicSubnetList: !GetAtt VpcStack.Outputs.PublicSubnetList
        TweetStreamName: !Ref TweetStream
        TwitterProducerImage: !GetAtt ContainerRepoStack.Outputs.TwitterProducerImage
        FluentBitImage: !GetAtt ContainerRepoStack.Outputs.FluentBitImage
        TwitterTopicsParameter: !Ref TwitterTopicsParameter
        TwitterLanguagesParameter: !Ref TwitterLanguagesParameter
        TwitterFilterLevelParameter: !Ref TwitterFilterLevelParameter
        TwitterConsumerKey: !Ref TwitterConsumerKey
        TwitterConsumerSecretKey: !Ref TwitterConsumerSecretKey
        TwitterAccessToken: !Ref TwitterAccessToken
        TwitterAccessTokenSecret: !Ref TwitterAccessTokenSecret

  ContainerRepoStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: nested_stacks/container_repo/template.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        AlarmTopic: !Ref AlarmTopic
        S3ObjectsFunctionArn: !GetAtt S3ObjectsFunction.Arn
        DockerfileLayer: !Ref DockerfileLayer

  ElasticsearchStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: nested_stacks/elasticsearch/template.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        AlarmTopic: !Ref AlarmTopic
        IndexingStreamArn: !GetAtt IndexingStream.Arn
        UserPool: !Ref UserPool
        PowertoolsLayer: !Ref PowertoolsLayer
        CustomResourceHelperLayer: !Ref CustomResourceHelperLayer
        ElasticsearchClientLayer: !Ref ElasticsearchClientLayer
        ElasticsearchVersion: !Ref ElasticsearchVersion
        ElasticsearchAvailabilityZoneCount: !Ref ElasticsearchAvailabilityZoneCount
        ElasticsearchDataNodeInstanceType: !Ref ElasticsearchDataNodeInstanceType
        ElasticsearchDataNodeInstanceCount: !Ref ElasticsearchDataNodeInstanceCount
        ElasticsearchMasterNodeInstanceType: !Ref ElasticsearchMasterNodeInstanceType
        ElasticsearchMasterNodeInstanceCount: !Ref ElasticsearchMasterNodeInstanceCount
        ElasticsearchAdvancedSecurityEnabled: !Ref ElasticsearchAdvancedSecurityEnabled

  DataLakeStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: nested_stacks/datalake/template.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        AlarmTopic: !Ref AlarmTopic
        Bucket: !Ref Bucket
        TweetStreamArn: !GetAtt TweetStream.Arn

  LabelingStack:
    Type: AWS::CloudFormation::Stack
    Condition: LabelingJobEnabled
    Properties:
      TemplateURL: nested_stacks/labeling_job/template.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        AlarmTopic: !Ref AlarmTopic
        TweetStreamArn: !GetAtt TweetStream.Arn
        UserPoolId: !Ref UserPool
        Bucket: !Ref Bucket
        S3ObjectsFunctionArn: !GetAtt S3ObjectsFunction.Arn
        PowertoolsLayer: !Ref PowertoolsLayer
        CustomResourceHelperLayer: !Ref CustomResourceHelperLayer
        LabelingUiTemplateLayer: !Ref LabelingUiTemplateLayer

  # Custom Resource --------------------------------------
  S3ObjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: '[Custom Resource] Create s3 objects from lambda layer'
      CodeUri: custom_resources/s3_objects/
      Layers: 
        - !Ref CustomResourceHelperLayer
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'lambda:GetLayerVersion'
                - 's3:PutObject'
              Resource: '*'

  # Lambda Layers --------------------------------------
  PowertoolsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'powertools-${AWS::StackName}'
      Description: AWS Lambda Powertools (Python)
      ContentUri: layers/powertools/
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8

  CustomResourceHelperLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'crhelper-${AWS::StackName}'
      Description: Custom Resource Helper
      ContentUri: layers/crhelper/
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8

  ElasticsearchClientLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'elasticsearch-client-${AWS::StackName}'
      Description: Python Elasticsearch Client
      ContentUri: layers/elasticsearch_client/
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8

  DockerfileLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'dockerfile-${AWS::StackName}'
      Description: Dockerfile
      ContentUri: nested_stacks/container_repo/containers/

  LabelingUiTemplateLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'labeling-ui-template-${AWS::StackName}'
      Description: Ground Truth Labeling UI
      ContentUri: nested_stacks/labeling_job/ui_template

Outputs:

  S3ConsoleURL:
    Description: URL to the Lambda Function console
    Value: !Sub 'https://s3.console.aws.amazon.com/s3/buckets/${Bucket}/?region=${AWS::Region}&tab=overview'

  TwitterRawLocation:
    Description: S3 Twitter Raw location.
    Value: !Sub 's3://${DataLakeStack.Outputs.Bucket}/raw/'

  KibanaURL:
    Description: Kibana URL
    Value: !Sub 'https://${ElasticsearchStack.Outputs.ElasticsearchDomainEndpoint}/_plugin/kibana/'
