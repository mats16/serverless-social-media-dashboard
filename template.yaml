AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"
Description: 'Social Media Dashboard Main Template'
Metadata:
  AWS::ServerlessRepo::Application:
    Name: serverless-social-media-dashboard
    Description: "Serverless Social Media Dashboard"
    Author: Kazuki Matsuda
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['serverless', 'fargate', 'lambda', 'kinesis', 'elasticsearch', 'twitter']
    HomePageUrl: https://github.com/mats16/serverless-social-media-dashboard
    SemanticVersion: 0.0.4
    SourceCodeUrl: https://github.com/mats16/serverless-social-media-dashboard

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Tweets Configuration
        Parameters:
          - TwitterTermList
          - TwitterLanguages
          - TwitterFilterLevel
      - Label:
          default: Twitter API Parameters
        Parameters:
          - AuthConsumerKey
          - AuthConsumerSecret
          - AuthAccessToken
          - AuthAccessTokenSecret
      - Label:
          default: Application Parameters
        Parameters:
          - ComprehendEntityScoreThreshold
          - MecabLambdaLayerArn

Parameters:
  TwitterTermList:
    Description: List of terms for twitter to listen to
    Type: CommaDelimitedList
    Default: "AWS,EC2,RDS,S3"

  TwitterLanguages:
    Description: List of languages to use for the twitter streaming reader
    Type: CommaDelimitedList
    Default: "en,es,fr,de,it,pt,ar,hi,ja,ko,zh"

  TwitterFilterLevel:
    Description: https://developer.twitter.com/en/docs/tweets/filter-realtime/api-reference/post-statuses-filter
    Type: String
    Default: none
    AllowedValues:
      - none
      - low
      - medium

  AuthAccessToken:
    Description: Access Token for calling twitter
    Type: String
  AuthAccessTokenSecret:
    Description: Access Token Secret for calling twitter
    Type: String
    NoEcho: True
  AuthConsumerKey:
    Description: Consumer key for access twitter
    Type: String
  AuthConsumerSecret:
    Description: Consumer Secret for access twitter
    Type: String
    NoEcho: True

  ComprehendEntityScoreThreshold:
    Type: Number
    Default: 0.8
    MaxValue: 1
    MinValue: 0

  MecabLambdaLayerArn:
    Type: String
    Default: 'arn:aws:lambda:us-east-1:123456789012:layer:dummy:1'

  SignupAllowedDomains:
    Type: CommaDelimitedList
    Description: Specific domains allowed to register on Cognito User Pool
    Default: amazon.com,amazon.co.jp

Conditions:
  CreateMecabLambda: !Not [!Equals [!Ref MecabLambdaLayerArn, 'arn:aws:lambda:us-east-1:123456789012:layer:dummy:1']]

Resources:

  TwitterTopicsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${AWS::StackName}/Twitter/Topics'
      Description: A comma-separated list of phrases which will be used to determine what Tweets will be delivered on the stream.
      Type: StringList
      Value: !Join [ ',', !Ref TwitterTermList ]

  TwitterLanguagesParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${AWS::StackName}/Twitter/Languages'
      Type: StringList
      Value: !Join [ ',', !Ref TwitterLanguages ]

  TwitterFilterLevelParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${AWS::StackName}/Twitter/FilterLevel'
      Type: String
      Value: !Ref TwitterFilterLevel

  TwitterConsumerKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}/Twitter/ConsumerKey'
      SecretString:
        !Ref AuthConsumerKey

  TwitterConsumerSecretKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}/Twitter/ConsumerSecretKey'
      SecretString:
        !Ref AuthConsumerSecret

  TwitterAccessToken:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}/Twitter/AccessToken'
      SecretString:
        !Ref AuthAccessToken

  TwitterAccessTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}/Twitter/AccessTokenSecret'
      SecretString:
        !Ref AuthAccessTokenSecret

  # Application Main --------------------------------------
  TweetStream:
    Type: AWS::Kinesis::Stream
    Properties: 
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption: 
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  TweetStreamForBatch:
    Type: AWS::Kinesis::Stream
    Properties: 
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption: 
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  IndexingStream:
    Type: AWS::Kinesis::Stream
    Properties: 
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption: 
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  AnalyticsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Analytics Function'
      CodeUri: source/analyze_function/
      Handler: index.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 900
      Tracing: Active
      Environment:
        Variables:
          COMPREHEND_ENTITY_SCORE_THRESHOLD: !Ref ComprehendEntityScoreThreshold
          INDEXING_STREAM: !Ref IndexingStream
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt TweetStream.Arn
            StartingPosition: LATEST
            ParallelizationFactor: 1
            BatchSize: 200
            MaximumRecordAgeInSeconds: 300
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Sid: ComprehendAccess
              Effect: Allow
              Action: ['comprehend:DetectEntities', 'comprehend:DetectSentiment', 'comprehend:DetectKeyPhrases']
              Resource: '*'
            - Sid: TranslateAccess
              Effect: Allow
              Action: ['translate:TranslateText']
              Resource: '*'
            - Sid: KinesisAccess
              Effect: Allow
              Action:
                - 'kinesis:PutRecord'
                - 'kinesis:PutRecords'
              Resource: !GetAtt IndexingStream.Arn

  AnalyticsFunctionForBatch:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !GetAtt AnalyticsFunction.Arn
      EventSourceArn: !GetAtt TweetStreamForBatch.Arn
      StartingPosition: LATEST
      ParallelizationFactor: 10
      BatchSize: 400
      MaximumRecordAgeInSeconds: 604800
      #MaximumBatchingWindowInSeconds: Integer

#  MecabFunction:
#    Type: AWS::Serverless::Function
#    Condition: CreateMecabLambda
#    Properties:
#      Description: 'MeCab Function'
#      CodeUri: source/mecab_function/
#      Handler: index.lambda_handler
#      Runtime: python3.8
#      Layers:
#        - !Ref MecabLambdaLayerArn
#      MemorySize: 1024
#      Timeout: 300
#      Tracing: Active
#      Environment:
#        Variables:
#          INDEXING_STREAM: !Ref IndexingStream
#      Events:
#        Stream:
#          Type: Kinesis
#          Properties:
#            Stream: !GetAtt TweetStream.Arn
#            StartingPosition: LATEST
#            ParallelizationFactor: 1
#            BatchSize: 200
#            MaximumRecordAgeInSeconds: 300
#      Policies:
#        - Version: "2012-10-17"
#          Statement:
#            - Sid: KinesisAccess
#              Effect: Allow
#              Action:
#                - 'kinesis:PutRecord'
#                - 'kinesis:PutRecords'
#              Resource: !GetAtt IndexingStream.Arn
#
#  MecabFunctionForBatch:
#    Type: AWS::Lambda::EventSourceMapping
#    Condition: CreateMecabLambda
#    Properties:
#      FunctionName: !GetAtt MecabFunction.Arn
#      EventSourceArn: !GetAtt TweetStreamForBatch.Arn
#      StartingPosition: LATEST
#      ParallelizationFactor: 1
#      BatchSize: 200
#      MaximumRecordAgeInSeconds: 604800
#      #MaximumBatchingWindowInSeconds: Integer

  IndexingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Indexing function  - KinesisStream to Elasticsearch '
      Runtime: python3.7
      Layers: 
        - !Ref PowertoolsLayer
      CodeUri: source/indexing_function/
      Handler: index.lambda_handler
      MemorySize: 192
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          ELASTICSEARCH_HOST: !GetAtt ElasticsearchStack.Outputs.ElasticsearchDomainEndpoint
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt IndexingStream.Arn
            BatchSize: 1000
            StartingPosition: LATEST
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Sid: ElasticsearchHttpAccess
              Effect: Allow
              Action:
                - es:ESHttpPut
                - es:ESHttpPost
              Resource:
                - !Sub '${ElasticsearchStack.Outputs.ElasticsearchArn}/*'

  IndexerRole:
    Type: Custom::Role
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt ElasticsearchStack.Outputs.ElasticsearchResourceFunctionArn
      URL: !Sub 'https://${ElasticsearchStack.Outputs.ElasticsearchDomainEndpoint}/_opendistro/_security/api/roles/indexer'
      Body: !Sub |
        {
          "description": "Provide the minimum permissions for bulk indexer",
          "index_permissions": [
            {
              "index_patterns": [
                "tweets-*"
              ],
              "fls": [],
              "masked_fields": [],
              "allowed_actions": [
                "crud",
                "create_index"
              ]
            }
          ],
          "tenant_permissions": [],
          "cluster_permissions": [
            "indices:data/write/bulk"
          ]
        }

  IndexerRoleMapping:
    Type: Custom::RoleMapping
    Version: 1.0
    DependsOn: IndexerRole
    Properties:
      ServiceToken: !GetAtt ElasticsearchStack.Outputs.ElasticsearchResourceFunctionArn
      URL: !Sub 'https://${ElasticsearchStack.Outputs.ElasticsearchDomainEndpoint}/_opendistro/_security/api/rolesmapping/indexer'
      Body: !Sub |
        {
          "backend_roles" : [
            "${IndexingFunctionRole.Arn}"
          ]
        }

  TweetEventBus:
    Type: AWS::Events::EventBus
    Properties: 
      Name: !Ref AWS::StackName

  PuEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'PutEvent function  - KinesisStream to EventBridge'
      CodeUri: source/put_events_function/
      Handler: index.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 10
      Tracing: Active
      Environment:
        Variables:
          EventBusName: !Ref TweetEventBus
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt IndexingStream.Arn
            BatchSize: 10
            StartingPosition: LATEST
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Sid: PutEvents
              Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - !GetAtt TweetEventBus.Arn

  # Nested Stacks --------------------------------------
  VpcStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: nested-stack/vpc.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName

  TwitterProducerStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: nested-stack/twitter-producer.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        VpcId: !GetAtt VpcStack.Outputs.VpcId
        PublicSubnetList: !GetAtt VpcStack.Outputs.PublicSubnetList
        TweetStreamName: !Ref TweetStream
        #DockerImage: mats16/twitter-streaming-reader:0.1.0
        DockerImage: !GetAtt ContainerRepoStack.Outputs.ImageName
        TwitterTopicsParameter: !Ref TwitterTopicsParameter
        TwitterLanguagesParameter: !Ref TwitterLanguagesParameter
        TwitterFilterLevelParameter: !Ref TwitterFilterLevelParameter
        TwitterConsumerKey: !Ref TwitterConsumerKey
        TwitterConsumerSecretKey: !Ref TwitterConsumerSecretKey
        TwitterAccessToken: !Ref TwitterAccessToken
        TwitterAccessTokenSecret: !Ref TwitterAccessTokenSecret

  ContainerRepoStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: nested-stack/container-repo.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        CustomResourceHelperLayer: !Ref CustomResourceHelperLayer
        DockerfileLayer: !Ref DockerfileLayer

  ElasticsearchStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: nested-stack/elasticsearch.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        CustomResourceHelperLayer: !Ref CustomResourceHelperLayer
        RequestsAWS4AuthLayer: !Ref RequestsAWS4AuthLayer

  DataLakeStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: nested-stack/datalake.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        TweetStreamArn : !GetAtt TweetStream.Arn

  # Lambda Layers --------------------------------------
  PowertoolsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'powertools-python-${AWS::StackName}'
      Description: AWS Lambda Powertools (Python)
      ContentUri: layers/powertools/
      CompatibleRuntimes:
        - python3.7
    Metadata:
      BuildMethod: python3.7

  CustomResourceHelperLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'crhelper-${AWS::StackName}'
      Description: Custom Resource Helper
      ContentUri: layers/crhelper/
      CompatibleRuntimes:
        - python3.7
    Metadata:
      BuildMethod: python3.7

  ElasticsearchClientLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'elasticsearch-${AWS::StackName}'
      Description: Python Elasticsearch Client
      ContentUri: layers/elasticsearch/
      CompatibleRuntimes:
        - python3.7
    Metadata:
      BuildMethod: python3.7

  RequestsAWS4AuthLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'requests-aws4auth-${AWS::StackName}'
      Description: AWS v4 authentication for the Python Requests library.
      ContentUri: layers/requests-aws4auth/
      CompatibleRuntimes:
        - python3.7
    Metadata:
      BuildMethod: python3.7

  DockerfileLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'dockerfile-${AWS::StackName}'
      Description: Dockerfile
      ContentUri: containers/
      CompatibleRuntimes:
        - python3.7
    Metadata:
      BuildMethod: python3.7

Outputs:

  S3ConsoleURL:
    Description: URL to the Lambda Function console
    Value: !Sub 'https://s3.console.aws.amazon.com/s3/buckets/${DataLakeStack.Outputs.Bucket}/?region=${AWS::Region}&tab=overview'

  TwitterRawLocation:
    Description: S3 Twitter Raw location.
    Value: !Sub 's3://${DataLakeStack.Outputs.Bucket}/raw/'

  KibanaURL:
    Description: Kibana URL
    Value: !Sub 'https://${ElasticsearchStack.Outputs.ElasticsearchDomainEndpoint}/_plugin/kibana/'
