AWSTemplateFormatVersion: '2010-09-09'
Description: '[Social Media Dashboard] Container Repository Stack'

Parameters:

  ParentStackName:
    Type: String

  ImageVersion:
    Type: String
    Default: latest

  CustomResourceHelperLayer:
    Type: String

  DockerfileLayer:
    Type: String

Resources:

  TwitterProducerRepo:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryName: !Sub '${ParentStackName}/twitter-stream-producer'
      ImageScanningConfiguration: 
        scanOnPush: "true"
      #LifecyclePolicy:
      #  LifecyclePolicyText: !Sub
      #    - '{"rules":[{"rulePriority":1,"description":"Retained Image count: ${RetainedImageCount}","selection":{"tagStatus":"any","countType":"imageCountMoreThan","countNumber":${RetainedImageCount}},"action":{"type":"expire"}}]}'
      #    - { RetainedImageCount: !Ref RetainedImageCount }
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          Sid: AllowPull
          Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action:
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - ecr:BatchCheckLayerAvailability

  FluentBitRepo:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryName: !Sub '${ParentStackName}/fluent-bit'
      ImageScanningConfiguration: 
        scanOnPush: "true"
      #LifecyclePolicy:
      #  LifecyclePolicyText: !Sub
      #    - '{"rules":[{"rulePriority":1,"description":"Retained Image count: ${RetainedImageCount}","selection":{"tagStatus":"any","countType":"imageCountMoreThan","countNumber":${RetainedImageCount}},"action":{"type":"expire"}}]}'
      #    - { RetainedImageCount: !Ref RetainedImageCount }
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          Sid: AllowPull
          Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action:
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - ecr:BatchCheckLayerAvailability

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeBuild
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}'
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                Resource:
                  - !GetAtt TwitterProducerRepo.Arn
                  - !GetAtt FluentBitRepo.Arn
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource:
                  - '*'

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipeline
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketVersioning
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub '${ArtifactBucket.Arn}'
                  - !Sub '${ArtifactBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource:
                  - !GetAtt CodeBuildProject.Arn

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)           
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build --tag ${ECR_DOMAIN}/${TWITTER_PRODUCER_REPO}:${IMAGE_VERSION} ./twitter-stream-producer
                - docker build --tag ${ECR_DOMAIN}/${FLUENT_BIT_REPO}:${IMAGE_VERSION} ./fluent-bit
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push ${ECR_DOMAIN}/${TWITTER_PRODUCER_REPO}:${IMAGE_VERSION}
                - docker push ${ECR_DOMAIN}/${FLUENT_BIT_REPO}:${IMAGE_VERSION}
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:18.09.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: ECR_DOMAIN
            Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com'
          - Name: TWITTER_PRODUCER_REPO
            Value: !Ref TwitterProducerRepo
          - Name: FLUENT_BIT_REPO
            Value: !Ref FluentBitRepo
          - Name: IMAGE_VERSION
            Value: !Ref ImageVersion
      Cache:
        Type: LOCAL
        Modes:
          - LOCAL_DOCKER_LAYER_CACHE

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: S3
              Configuration:
                S3Bucket: !Sub ${ArtifactBucket}
                S3ObjectKey: dockerfile.zip
              OutputArtifacts:
                - Name: TwitterStreamProducer
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: TwitterStreamProducer
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

  DockerfileZip:
    Type: Custom::Dockerfile
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt SetupDockerfileFunction.Arn
      DockerfileLayer: !Ref DockerfileLayer
      Bucket: !Ref ArtifactBucket
      Key: dockerfile.zip

  # Custom Resources ------------------------------------
  SetupDockerfileFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PutObject
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Put*'
                Resource: '*'

  SetupDockerfileFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: '[Custom Resource] Setup Dockerfile'
      Runtime: python3.7
      Role: !GetAtt SetupDockerfileFunctionRole.Arn
      Layers: 
        - !Ref CustomResourceHelperLayer
        - !Ref DockerfileLayer
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          from __future__ import print_function
          from crhelper import CfnResource
          import logging
          import json
          import os
          import shutil
          import boto3
          from s3urls import parse_url

          logger = logging.getLogger(__name__)
          helper = CfnResource(json_logging=False, log_level='DEBUG', boto_level='CRITICAL')

          try:
              client = boto3.client('s3')
          except Exception as e:
              helper.init_failure(e)

          def lambda_handler(event, context):
              print(json.dumps(event))
              helper(event, context)

          @helper.create
          @helper.update
          def create(event, context):
              bucket = event['ResourceProperties']['Bucket']
              key = event['ResourceProperties']['Key']
              fn = '/tmp/data'
              shutil.make_archive(fn, 'zip', root_dir='/opt/python/src')
              data = open(f'{fn}.zip', 'rb')
              res = client.put_object(
                  Bucket=bucket,
                  Key=key,
                  Body=data
              )
              physical_resource_id = f's3://{bucket}/{key}'
              return physical_resource_id

          @helper.delete
          def delete(event, context):
              try:
                  physical_resource_id = event['PhysicalResourceId']
                  bucket = parse_url(physical_resource_id)['bucket']
                  key = parse_url(physical_resource_id)['key']
                  res = client.delete_object(
                      Bucket=bucket,
                      Key=key
                  )
                  logger.info(res.text)
              except Exception as e:
                  logger.error(e)



Outputs:
  
  TwitterProducerImage:
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${TwitterProducerRepo}:${ImageVersion}'

  FluentBitImage:
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FluentBitRepo}:${ImageVersion}'
